>>> matrix_divided = __import__('2-matrix_divided').matrix_divided
>>> matrix = [[1, 0], [0, 1]]
>>> matrix_divided(matrix, 2)
[[0.5, 0.0], [0.0, 0.5]]
>>> matrix_divided(matrix, 0) # doctest + ELLIPSIS
Traceback (most recent call last):
...
ZeroDivisionError: division by zero
>>> matrix_divided(matrix, float("inf"))
[[0.0, 0.0], [0.0, 0.0]]
>>> matrix_divided(matrix, float("NaN"))
[[nan, nan], [nan, nan]]
>>> matrix_divided(matrix, "hello") # doctest + ELLIPSIS
Traceback (most recent call last):
...
TypeError: div must be a number
>>> matrix_divided(5, 2) # doctest + ELLIPSIS
Traceback (most recent call last):
...
TypeError: matrix must be a matrix (list of lists) of integers/floats
>>> matrix_divided([5, 4, 3], 2) # doctest + ELLIPSIS
Traceback (most recent call last):
...
TypeError: matrix must be a matrix (list of lists) of integers/floats
>>> matrix_divided("hello", 2) # doctest + ELLIPSIS
Traceback (most recent call last):
...
TypeError: matrix must be a matrix (list of lists) of integers/floats
>>> matrix_divided([['a', 'b'], ['c', 'd']], 2) # doctest + ELLIPSIS
Traceback (most recent call last):
...
TypeError: matrix must be a matrix (list of lists) of integers/floats
>>> matrix_divided([[1], [2, 2]], 2) # doctest + ELLIPSIS
Traceback (most recent call last):
...
TypeError: Each row of the matrix must have the same size
>>> matrix_divided([[1]]) # doctest + ELLIPSIS
Traceback (most recent call last):
...
TypeError: matrix_divided() missing 1 required positional argument: 'div'
>>> matrix_divided() # doctest + ELLIPSIS
Traceback (most recent call last):
...
TypeError: matrix_divided() missing 2 required positional arguments: 'matrix' and 'div'
